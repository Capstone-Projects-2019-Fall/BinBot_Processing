package edu.temple.capstone.BinBotServer.instructions;

import javafx.util.Pair;
import org.json.JSONObject;

import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;

/**
 * The Instruction class represents a set of instructions that BinBot should follow in order to retrieve trash. It is
 * also capable of converting json string to this object and providing a json version of itself in the format of
 * {
 *     "status":<"PATROL"|"NAVIGATION"|"RETRIEVAL">,
 *     "img":<image as object>,
 *     "treads:[
 *     		{
 *     			"angle":<Double>,
 *     			"distance":<Double>
 *     		}
 *     	]
 *     	"arms":[
 *     		{
 *     			"angle":<Double>
 *     		}
 *     	]
 * }
 * where status is BinBot's operating status, img holds a picture captured by binbot's camera, treads is an array
 * containing pairs of angles it should turn and distances it should travel forward after turning,
 * and arms is an array of angles each joint should turn.
 *
 *
 *
 * @author Sean DiGirolamo
 * @since   2019-10-18
 */
public class Instruction
{
	private Status status;
	private BufferedImage img;
	private List<Pair<Double, Double>> treads;
	private List<Double> arms;

	/**
	 * This constructor takes as input a json string. It assumes that the json is properly formatted in the proper
	 * configuration and results in an Instruction object based on the json string provided.
	 *
	 *
	 *
	 * @author Sean DiGirolamo
	 * @since 2019-10-18
	 */
	public Instruction(String json) {
		JSONObject jsonObject = new JSONObject(json);

		this.status = Status.valueOf(jsonObject.getString("status"));

		this.treads = new ArrayList<>();

		this.img = null;

		for (Object o : jsonObject.getJSONArray("treads")) {
			JSONObject jo = (JSONObject)o;
			treads.add(new Pair<>(jo.getDouble("angle"), jo.getDouble("distance")));
		}

		this.arms = new ArrayList<>();
		for (Object o : jsonObject.getJSONArray("arms")) {
			arms.add(((JSONObject) o).getDouble("angle"));
		}
	}

	/**
	 * This constructor takes as input an object array generated by OpenCV. Contained in this array is data about where
	 * waste has been located and if waste is in the image. Based on this data, instructions will be calculated for
	 * Binbot to execute and placed inside the resulting Instruction object.
	 *
	 *
	 *
	 * @author Sean DiGirolamo
	 * @since 2019-10-18
	 */
	public Instruction(Object[][] o) {
		this.status = Status.PATROL;
		this.img = null;
		this.treads = new ArrayList<>();
		this.treads.add(new Pair<>(0.0, 00.0));
		this.arms = new ArrayList<>();
		this.arms = new ArrayList<>();
		this.arms.add(0.0);
	}

	public String json() {
		String retval = "{\"status\":\"" + this.status.toString() +"\",";

		retval += "\"img\":" + "\"temporary\",";

		retval += "\"treads\":[";
		for (Pair pair : this.treads) {
			retval += "{\"angle\":" + pair.getKey() + ",";
			retval += "\"distance\":" + pair.getValue() + "}";
			if (pair != this.treads.get(this.treads.size() - 1)) {
				retval += ",";
			}
		}
		retval += "],";

		retval += "\"arms\":[";
		for (Double d : this.arms) {
			retval += "{\"angle\":" + d + "}";
			if (d != this.arms.get(this.arms.size() - 1)) {
				retval += ",";
			}
		}
		retval += "]}";

		return retval;
	}
}
